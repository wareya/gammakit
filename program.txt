print("general nonbrokenness:");

while (1)
{
    print("this loop isn't broken");
    break;
}

obj Ab
{

}

obj BlankObj
{
    
}

def noopfunc()
{
    
}

with(BlankObj)
{
    
}

noopfunc();

var ab;
ab = instance_create(Ab);
instance_add_variable(ab, "id", ab);
ab.id.y = ab+1;

print("basic language features:");

obj Character
{
    def create()
    {
        far localvar = 1;
    }
    def printthing(arg)
    {
        print(arg);
        print("I printed it!");
        print(localvar);
        return -12;
    }
    def getprintthing()
    {
        return printthing;
    }
    def getholder()
    {
        return holder;
    }
    def destroy()
    {
        print("instance died");
    }
}

var lasdfiawefd = instance_create(BlankObj);

var i;
i = instance_create(Character);
instance_add_variable(i, "id", i);
i.id.y = i+1;
print(i);
print(i.id);
print(i.y);
print(i.id.y);

def makez(argument)
{
    far z = argument;
}

def printz()
{
    print(z);
}

def printx(argument)
{
    print(x);
    x += 1;
    print(argument);
    return 1234;
}

def asdf()
{
    return 234658;
}

var as = asdf();
print(as);
print(asdf()*2);

instance_execute(i, printx, "test");
var a = instance_execute(i, printx, "test");
print(a);
a = print("asdf");
print(a);

instance_execute(i, makez, "test");
instance_execute(i, printz);

with(i)
{
    print(x);
    x -= 1;
}
print(i.x);

var i2 = instance_create(Character);
i2.localvar = 10;

with(Character)
{
    var asdfe4 = 10;
    printthing("this is an argument");
}

with(Character)
    var asdfe4 = 10;

with(i)
    far holder = i2;

i2.localvar = 5672453;

var bs = i2.printthing("alkergikadsg");

var bs2 = i.getholder().getprintthing()("alkergikadsg");
print(bs);
print(bs2);

i2.getprintthing()("alkergikadsg");

print("lambdas features:");

var mylambda = [x = "hello, world!", y = "adsf"](){print(x); x = "f"; print(x); {var x = "hello, nobody!"; print(x);}};
mylambda();
mylambda();
mylambda();
mylambda();

print("asdfasdf");

var trash = [0, mylambda, [1, 42]];

print(trash[2][1]);

trash[2][1] += 2;

print("asdfasdf3");

print(trash[2][1]);

trash[1]();

var blanklambda = [](){};
blanklambda();

var countdown = [](x)
{
    if(x > 0)
    {
        print(x);
        lambda_self(x-1);
    }
    else
        print("Liftoff!");
};

countdown(10);

print(len(trash));

var myarray = [0, 10, 2594];

var mydict = {"a":0,"b":20,135:-1,2:myarray};

print(mydict["b"]);

var newdict = mydict;

newdict["a"] = 5;

var mybad = [newdict];

newdict["b"] = 15;

mydict[2] = newdict[2];

newdict[2][0] = -453;

print([10, 100]);
print(newdict);
print(mydict);
print(mybad);

var mykeys = keys(mydict);

for(var j = 0; j < 10; {j += 1;})
    print(j);

for(var j = 0; j < 10; {j += 1;})
{
    if(j == 4)
        continue;
    print(j);
    if(j == 8)
        break;
}

var j = 34;

var myf = compile_text("print(\"test\");");
myf();

var myast = parse_text("print(\"toast\");");

var myotherast = myast;

def rewrite(ast, callback)
{
    ast = callback(ast);
    if(ast["isparent"])
    {
        var max = len(ast["children"]);
        for(var i = 0; i < max; i += 1)
            ast["children"][i] = rewrite(ast["children"][i], callback);
    }
    return ast;
}

myotherast = rewrite(myotherast, [](ast)
{
    if(ast["isparent"] and ast["text"] == "string" and len(ast["children"]) > 0)
        if(!ast["children"][0]["isparent"] and !ast["children"][0]["opdata"]["isop"] and ast["children"][0]["text"] == "\"toast\"")
            ast["children"][0]["text"] = "\"not toast\"";
    return ast;
});

var mycode = compile_ast(myast);
mycode();
var myothercode = compile_ast(myotherast);
myothercode();

def add(x)
{
    var addX = [x = x](y)
    {
        return y + x;
    };
    return addX;
}

var add1 = add(1);
print(add1(3));

var trew = 0;
while(trew < 5)
    trew += 1;
print(trew);

var xaa = "myarray";
print("asdf");
print(xaa[1]);
print(myarray[1]);
print("asdf2");

print(i.getholder().getprintthing()("alkergikadsg"));

xaa[1] = "e";

print(xaa);

print((5)+5);


var scope_test;
{
    def test_function(x)
    {
        if(x != 5)
            test_function(5);
        else
            print(5);
    }
    test_function(5);
    test_function(0);
    scope_test = test_function;
}
scope_test(5);
scope_test(0);

print("global behavior tests:");

globalvar x;

print(global.x);
global.x = 10;
print(global.x);

globaldef testfunc()
{
    print("I was accessed!");
}

def call_testfunc()
{
    testfunc();
}

call_testfunc();

print("subroutine-like function tests:");

subdef getarray()
{
    print(myarray);
    return myarray;
}

print(getarray()[0]);

print("generator tests:");

generator test(i)
{
    while(i > 0)
    {
        yield i;
        i -= 1;
    }
    return "generator has finalized";
}

var test_state = test(10);

while(test_state)
    print(invoke test_state);

// binary logical operator short-circuiting

def runs_only_once(x)
{
    print("this only runs once!");
    return x;
}
print("short circuiting of \"and\":");
if(runs_only_once(0) && runs_only_once(0)){}

print("short circuiting of \"or\":");
if(runs_only_once(1) || runs_only_once(1)){}

def runs_twice(x)
{
    print("this runs twice!");
    return x;
}

print("lack of short circuiting of \"and\":");
if(runs_twice(1) && runs_twice(1)){}

print("lack of short circuiting of \"or\":");
if(runs_twice(0) || runs_twice(0)){}

// unicode support

print("unicode support:");

print("utf-8にも対応している");

// foreach support

var test_array = ["asdf", 0, ["test", 0]];
var test_dict = {"asdf" : 1, 0 : "a"};

for(thing in test_array)
    print(thing);

for(thing in test_dict)
    print(thing);

for(nothing in [])
    print("oops! this shouldn't execute!");

print("switch support:");

var x = "test";

def randomtestfunction()
{
    print("this won't run!");
    return 2;
}

switch (x)
{
case 0:
    print("first block");
case 1, "test", randomtestfunction():
    var x = "test2"; // this is a new block, so it doesn't clash with the `var x = "test";` above
    print("second block, this should run");
case "test":
    print("not run");
default:
    print("also not run");
}

switch (x)
{
case 0:
    print("this is not run!");
default:
    print("default block, this should run!");
}

switch (x)
{
case 0:
    print("this is not run!");
}

print("insert():");

var changed_array = insert(insert(insert([], 0, 10), 0, 5), 1, 7);
var changed_dict = insert(insert(insert({}, 0, 10), "asdf", 5), "asdf", 7);

print(changed_array);
print(changed_dict);

print("remove():");

changed_array = remove(changed_array, 1);
changed_dict = remove(changed_dict, "asdf");

print(changed_array);
print(changed_dict);

print("round(), floor(), ceil():");
print(round(0.49999), round(0.5), floor(0.9), ceil(0.1));
