number: TOKEN
true
false
%[0-9]+\.[0-9]+([eE]([+-])?[0-9]+)?%
%[0-9]+\.([eE]([+-])?[0-9]+)?%
%\.[0-9]+([eE]([+-])?[0-9]+)?%
%[0-9]+([eE]([+-])?[0-9]+)?%

string: TOKEN
%"([^"\\]|\\["nrt\\])*"%

name: TOKEN
%[a-zA-Z_][0-9a-zA-Z_]*%

capsname: TOKEN
%[A-Z][0-9a-zA-Z_]*%

arglist:
$expr$...,

funcargs:
( $arglist$? )

arrayindex:
[ $expr$ ]

indirection:
. $name$

dismember:
-> $name$

dictindex:
{ $name$ }

rhunexpr_right:
$funcargs$
$dismember$
$arrayindex$
$indirection$
$dictindex$

rhunexpr:
$supersimplexpr$ $rhunexpr_right$+

funccall:
$supersimplexpr$ $rhunexpr_right$+

unusedcomma:
,

arraybody:
[ ]
[ $expr$..., $unusedcomma$? ]

dictval:
$expr$ : $expr$

dictbody:
{ }
{ $dictval$..., $unusedcomma$? }

setbody:
set { }
set { $expr$..., $unusedcomma$? }

parenexpr:
( $expr$ )

supersimplexpr:
$ternary$
$parenexpr$
$lambda$
$arraybody$
$dictbody$
$setbody$
$string$
$name$

invocation_expr:
invoke $lvar$

ternary:
$parenexpr$ ? $parenexpr$? : $parenexpr$

simplexpr:
$ternary$
$parenexpr$
$rvar$
$invocation_expr$
$lambda$
$arraybody$
$dictbody$
$setbody$
$number$
$string$
$name$

rvar:
$rhunexpr$

lvar:
$rhunexpr$
$name$

expr:
$binexpr_0$

binexpr_0: LEFTBINEXPR 0
$binexpr_1$ >>? $binop_0$ $binexpr_0$

binexpr_1: LEFTBINEXPR 1
$binexpr_2$ >>? $binop_1$ $binexpr_1$

binexpr_2: LEFTBINEXPR 2
$binexpr_3$ >>? $binop_2$ $binexpr_2$

binexpr_3: LEFTBINEXPR 3
$lhunop$ >>? $binop_3$ $binexpr_3$

unary:
$unop$ $lhunop$

lhunop:
$unary$
$simplexpr$

unop:
!
-
+

binop_0:
and
or
&&
||

binop_1:
==
!=
>=
<=
>
<

binop_2:
+
-

binop_3:
*
/
%

invocation_call:
invoke $lvar$

blankstatement:
;

statementlist:
{ $statement$* }

binstate:
$lvar$ $binstateop$ $expr$

unstate:
$lvar$ $unstateop$

statement:
$blankstatement$
$statementlist$
$declaration$ ;
$bareglobaldec$ ;
$condition$
$foreach$
$withstatement$
$withasstatement$
$switch$
$funcdef$
$globalfuncdef$
$objdef$
$binstate$ ;
$unstate$ ;
$instruction$ ;
$funccall$ ;
$invocation_call$ ;

objvardef:
var $name$..., ;

objfuncdef:
def $name$ ( $funcdefargs$ ) { $funcdefstatements$ }

objpart:
$objvardef$
$objfuncdef$

objparts:
$objpart$*

objdef:
obj $name$ { $objparts$ }

instruction:
break
continue
return $expr$
return
yield $expr$
yield
finalize

condition:
$ifcondition$
$whilecondition$
$forcondition$

withstatement:
with ( $name$ ) $block$

withasstatement:
with ( $expr$ as $name$ ) $block$

whilecondition:
while $parenexpr$ $block$

barestatement:
$statementlist$
$declaration$
$bareglobaldec$
$binstate$
$unstate$
$funccall$
$invocation_call$

forheaderstatement:
$barestatement$?

forheaderexpr:
$expr$?

forheader:
$forheaderstatement$ ; $forheaderexpr$ ; $forheaderstatement$

forcondition:
for ( $forheader$ ) $block$

foreach:
for ( $name$ in $expr$ ) $block$

ifcondition:
if $parenexpr$ $block$ >>? else $block$

block:
$statement$

declaration:
var $declname$...,
globalvar $declname$...,

bareglobaldec:
bare globalvar $capsname$ = $expr$

declname:
$name$ >>? = $expr$

funcdeftoken:
def
generator

funcdefargs:
>>? $name$...,

funcdefstatements:
$statement$*

funcdef:
$funcdeftoken$ $name$ ( $funcdefargs$ ) { $funcdefstatements$ }

globalfuncdef:
globaldef $name$ ( $funcdefargs$ ) { $funcdefstatements$ }

binstateop:
=
+=
-=
*=
/=

unstateop:
++
--

program:
$statement$*

lambda:
[ $lambdacapture$ ] ( $lambdaargs$ ) { $lambdabody$ }

lambcapexpr:
$name$ = $expr$

lambdacapture:
>>? $lambcapexpr$...,

lambdaargs:
>>? $name$...,

lambdabody:
$statement$*

switch:
switch ( $expr$ ) { $switchcases$ }

switchcases:
$switchcase$+ $switchdefault$?

switchcase:
case $expr$..., : $nakedblock$

switchdefault:
default : $nakedblock$

nakedblock:
$statement$*
