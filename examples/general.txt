print("general nonbrokenness:");

while (1)
{
    print("this loop isn't broken");
    break;
}

obj Ab
{

}

obj BlankObj
{
    
}

def noopfunc()
{
    
}

with(BlankObj)
{
    
}

noopfunc();

var ab;
ab = instance_create(Ab);

print("basic language features:");

obj Character
{
    var localvar, x, y;
    var holder;
    def create()
    {
        localvar = 1;
        x = 0;
        y = 0;
        holder = id;
    }
    def printthing(arg)
    {
        print(arg);
        print("I printed it!");
        print(localvar);
        return -12;
    }
    def getprintthing()
    {
        return printthing;
    }
    def getholder()
    {
        return holder;
    }
    def destroy()
    {
        print("instance died");
    }
}

var lasdfiawefd = instance_create(BlankObj);

var i;
i = instance_create(Character);
print(i);
print(i.id);
print(i.y);
print(i.id.y);

print(instance_object(i));
print(Character);

def asdf()
{
    return 234658;
}

var as = asdf();
print(as);
print(asdf()*2);
with(i as Character)
{
    print(x);
    x -= 1;
}
with(i as Character)
{
    print(x);
    x -= 1;
}
print(i.x);

var i2 = instance_create(Character);
i2.localvar = 10;

with(Character)
{
    var asdfe4 = 10;
    printthing("this is an argument");
}

with(Character)
    var asdfe4 = 10;

i2.localvar = 5672453;

var bs = i2.printthing("alkergikadsg");

var bs2 = i.getholder().getprintthing()("alkergikadsg");
print(bs);
print(bs2);

i2.getprintthing()("alkergikadsg");

print("lambdas features:");

var mylambda = [x = "hello, world!", y = "adsf"](){print(x); x = "f"; print(x); {var x = "hello, nobody!"; print(x);}};
mylambda();
mylambda();
mylambda();
mylambda();

print("asdfasdf");

var trash = [0, mylambda, [1, 42]];

print(trash[2][1]);

trash[2][1] += 2;

print("asdfasdz");

print(trash[2][1]);

trash[1]();

var blanklambda = [](){};
blanklambda();

var countdown = [](x)
{
    if(x > 0)
    {
        print(x);
        lambda_self(x-1);
    }
    else
        print("Liftoff!");
};

countdown(10);

print("length:");
print(trash->len());

var myarray = [0, 10, 2594];

var mydict = {"a":0,"b":20,135:-1,2:myarray};

print(mydict["b"]);

var newdict = mydict;

newdict["a"] = 5;

var mybad = [newdict];

newdict["b"] = 15;

mydict[2] = newdict[2];

newdict[2][0] = -453;

print([10, 100]);
print(newdict);
print(mydict);
print(mybad);

var mykeys = mydict->keys();

for(var j = 0; j < 10; j++)
    print(j);

for(var j = 10; j > 0; j--)
    print(j);

for(var j = 0; j < 10; {j += 1;})
{
    if(j == 4)
        continue;
    print(j);
    if(j == 8)
        break;
}

var j = 34;

var myf = compile_text("print(\"test\");");
myf();

var myast = parse_text("print(\"toast\");");

var myotherast = myast;

def rewrite(ast, callback)
{
    ast = callback(ast);
    if(ast["isparent"])
    {
        var max = ast["children"]->len();
        for(var i = 0; i < max; i += 1)
            ast["children"][i] = rewrite(ast["children"][i], callback);
    }
    return ast;
}

myotherast = rewrite(myotherast, [](ast)
{
    if(ast["isparent"] and ast["text"] == "string" and ast["children"]->len() > 0)
        if(!ast["children"][0]["isparent"] and !ast["children"][0]->contains("precedence") and ast["children"][0]["text"] == "\"toast\"")
            ast["children"][0]["text"] = "\"not toast\"";
    return ast;
});

var mycode = compile_ast(myast);
mycode();
var myothercode = compile_ast(myotherast);
myothercode();

def add(x)
{
    var addX = [x = x](y)
    {
        return y + x;
    };
    return addX;
}

var add1 = add(1);
print(add1(3));

var trew = 0;
while(trew < 5)
    trew += 1;
print(trew);

var xaa = "myarray";
print("asdf");
print(xaa[1]);
print(myarray[1]);
print("asdf2");

print(i.getholder().getprintthing()("alkergikadsg"));

xaa->replace_char(1, "Ｙ");

print(xaa);

print((5)+5);


var scope_test;
{
    def test_function(x)
    {
        if(x != 5)
            test_function(5);
        else
            print(5);
    }
    test_function(5);
    test_function(0);
    scope_test = test_function;
}
scope_test(5);
scope_test(0);

print("global behavior tests:");

globalvar x;

print(global.x);
global.x = 10;
print(global.x);

globaldef testfunc()
{
    print("I was accessed!");
}

def call_testfunc()
{
    testfunc();
}

call_testfunc();

print("generator tests:");

generator gentest(i)
{
    while(i > 0)
    {
        yield i;
        i -= 1;
    }
    return "generator has finalized";
}

var test_state = gentest(10);

// prints 10 through 1 then "generator has finalized"
while(test_state)
    print(invoke test_state);

// the generatorstate value inside of the variable "test_state" is now consumed

// binary logical operator short-circuiting

def runs_only_once(x)
{
    print("this only runs once!");
    return x;
}
print("short circuiting of \"and\":");
if(runs_only_once(0) && runs_only_once(0)){}

print("short circuiting of \"or\":");
if(runs_only_once(1) || runs_only_once(1)){}

def runs_twice(x)
{
    print("this runs twice!");
    return x;
}

print("lack of short circuiting of \"and\":");
if(runs_twice(1) && runs_twice(1)){}

print("lack of short circuiting of \"or\":");
if(runs_twice(0) || runs_twice(0)){}

// unicode support

print("unicode support:");

print("utf-8にも対応している");

// foreach support

var test_array = ["asdf", 0, ["test", 0]];
var test_dict = {"asdf" : 1, 0 : "a"};
var test_set = set {"asdf", 0};

for(thing in test_array)
    print(thing);

for(thing in test_dict)
    print(thing);

for(thing in test_set)
    print(thing);

print("blank thing:");

for(nothing in [1])
    print("this should execute once!");

for(nothing in [])
    print("oops! this shouldn't execute!");

print("switch support:");

var x = "test";

def randomtestfunction()
{
    print("this won't run!");
    return 2;
}

switch (x)
{
case 0:
    print("first block");
case 1, "test", randomtestfunction():
    var x = "test2"; // this is a new block, so it doesn't clash with the `var x = "test";` above
    print("second block, this should run");
case "test":
    print("not run");
default:
    print("also not run");
}

switch (x)
{
case 0:
    print("this is not run!");
default:
    print("default block, this should run!");
}

switch (x)
{
case 0:
    print("this is not run!");
}

print("insert():");

var changed_array = [];
changed_array->insert(0, 10);
changed_array->insert(0, 5);
changed_array->insert(1, 7);
var changed_dict = {};
changed_dict->insert(0, 10);
changed_dict->insert("asdf", 5);
changed_dict->insert("asdf", 7);

print(changed_array);
print(changed_dict);

print("remove():");

print(changed_array->remove(1));
print(changed_dict->remove("asdf"));

print(changed_array);
print(changed_dict);
var badstring_remove_test = "HelloX, World!";
badstring_remove_test->remove(5);
print(badstring_remove_test);

print("contains():");

print(changed_dict->contains(0), changed_dict->contains("notthere"));
print(set{10}->contains(10), set{10}->contains(0));


print("round(), floor(), ceil():");
print(round(0.49999), round(0.5), floor(0.9), ceil(0.1));

print("sets:");

print(set {0, 0, 10, "asdf", "asdf"});

var badset = set{0, 1, 10, 16};
badset->remove(10);
print(badset);
badset = set{};
badset->insert(10);
print(badset);

print("array equality:");
print([] == [0], [1] == [0], [0,10,1] == [0,10,1]);

print("dict equality:");
print({10:10,0:0,1:0,1:7,1:10});
print({} == {0:0}, {1:0} == {0:1}, {0:0} == {0:1}, {0:0,10:10,1:10} == {10:10,0:0,1:0,1:7,1:10});

print("set equality:");
print(set {} == set {0}, set {1} == set {0}, set {0,10,1} == set {10,0,1,1,1});

print("function equality:");
def makeafunction()
{
    def innerfunction()
    {
        
    }
    return innerfunction;
}

var func1 = makeafunction();
var func2 = makeafunction();

print(makeafunction == makeafunction);
print(func1 == func2);
print(makeafunction == func2);

print("string equality:");
print("asdf" == "asdf");
print("asdf" >= "asdf");
print("asdf" <= "asdf");
print("asdf" <= "zxcv");
print("asdf" < "zxcv");

print("asdf" == "zxcv");
print("asdf" >= "zxcv");
print("asdf" > "zxcv");

print("instance_exists and instance_kill:");

var timetodie = instance_create(Character);
print(instance_exists(timetodie));
instance_kill(timetodie);
print(instance_exists(timetodie));

print("globalvar and simultaneous assignment:");

globalvar dummyvar = 10;
print(global.dummyvar);

print("precedence sanity test:");

print(7/6/5);
print(7-6/2);
print(7/6-2);

print("array order test:");
print([0, 1, 2, 3, 4]);
print([0, 1, 2, 3, 4][0]);

print("string concatenation test:");
print("Hello, "+"world!");
print("Hello, "+"world!" == "Hello, world!");

print("string repetition test:");
print("/\\"*8.7);
print("/\\"*8.7 == "/\\/\\/\\/\\/\\/\\/\\/\\");

print("set length:");
print(set {}->len());
print(set {1, 1043, 1, 1, 2}->len());

print("printraw:");
printraw("a", "s", "d", "f", "\n");

print("insert() with strings:");
var badstring = "HelloWorld!";
badstring->insert(5, " ");
print(badstring);
var badstring2 = "Hello!";
badstring2->insert(-1, " World");
print(badstring == badstring2);

print("slicing:");
print("０１２"->slice(1, 2));
print([0, 1, 2]->slice(1, 2));

print("declaration-and-assignment evaluation order:");
var flei = "test";
{
    var flei = flei*2;
    print(flei);
}

print("indexing into literal arrays, dicts, and strings:");
print([0,1,2,3,4][3]);
print({"asdf" : 0}["asdf"]);
print("asdf"[0], "asdf"[3]);

print("dismembering:");
var badarray = [0, 1, 2, 3];
print(badarray->len());
print(badarray->len);

print("{} for dictionary items:");

var dumbdict = {"a" : 0, "b" : 1, "c" : "asdf"};

print(dumbdict{c});
dumbdict{c} = dumbdict{a};
print(dumbdict{c});


print("ternary:");
print((0)?("true"):("false"));
print((1)?("true"):("false"));


print("generator with for-each loops:");

test_state = gentest(10);

// this copies the generatorstate inside of test_state, then repeatedly invokes it
for(output in test_state)
    print(output);
for(output in test_state)
    print(output);


print("new stuff");

print(instance_has_variable(i, "asdgakwer"));
print(instance_has_variable(i, "x"));
print(instance_has_function(i, "auiaesd"));
print(instance_has_function(i, "create"));
print(object_has_variable(Character, "asdgakwer"));
print(object_has_variable(Character, "x"));
print(object_has_function(Character, "auiaesd"));
print(object_has_function(Character, "create"));
print(object_count(Character));


var baddict = {i : "instance in dict key"};
print(baddict[i]);
var badset2 = set {i, "instance in set"};
print(badset2);
