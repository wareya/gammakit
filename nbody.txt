var PI = 3.141592653589793;
bare globalvar SOLAR_MASS = PI*PI*4;
var DAYS_PER_YEAR = 365.24;

var bodies = [];

// sun
bodies->push({
    "x":  0,
    "y":  0,
    "z":  0,
    "xv": 0,
    "yv": 0,
    "zv": 0,
    "mass": SOLAR_MASS
});
// jupiter
bodies->push({
    "x":  4.84143144246472090e+00,
    "y": -1.16032004402742839e+00,
    "z": -1.03622044471123109e-01,
    "xv": 1.66007664274403694e-03 * DAYS_PER_YEAR,
    "yv": 7.69901118419740425e-03 * DAYS_PER_YEAR,
    "zv":-6.90460016972063023e-05 * DAYS_PER_YEAR,
    "mass": 9.54791938424326609e-04 * SOLAR_MASS
});
// saturn
bodies->push({
    "x":  8.34336671824457987e+00,
    "y":  4.12479856412430479e+00,
    "z": -4.03523417114321381e-01,
    "xv":-2.76742510726862411e-03 * DAYS_PER_YEAR,
    "yv": 4.99852801234917238e-03 * DAYS_PER_YEAR,
    "zv": 2.30417297573763929e-05 * DAYS_PER_YEAR,
    "mass": 2.85885980666130812e-04 * SOLAR_MASS
});
// uranus
bodies->push({
    "x":  1.28943695621391310e+01,
    "y": -1.51111514016986312e+01,
    "z": -2.23307578892655734e-01,
    "xv": 2.96460137564761618e-03 * DAYS_PER_YEAR,
    "yv": 2.37847173959480950e-03 * DAYS_PER_YEAR,
    "zv":-2.96589568540237556e-05 * DAYS_PER_YEAR,
    "mass": 4.36624404335156298e-05 * SOLAR_MASS
});
// neptune
bodies->push({
    "x":  1.53796971148509165e+01,
    "y": -2.59193146099879641e+01,
    "z":  1.79258772950371181e-01,
    "xv": 2.68067772490389322e-03 * DAYS_PER_YEAR,
    "yv": 1.62824170038242295e-03 * DAYS_PER_YEAR,
    "zv":-9.51592254519715870e-05 * DAYS_PER_YEAR,
    "mass": 5.15138902046611451e-05 * SOLAR_MASS
});

bare globalvar NUM_BODIES = bodies->len();
print("num bodies:");
print(NUM_BODIES);

globalvar x = [];
globalvar y = [];
globalvar z = [];
globalvar xv = [];
globalvar yv = [];
globalvar zv = [];
globalvar mass = [];
for(var i = 0; i < NUM_BODIES; i++)
{
    global.x->push(bodies[i]{x});
    global.y->push(bodies[i]{y});
    global.z->push(bodies[i]{z});
    global.xv->push(bodies[i]{xv});
    global.yv->push(bodies[i]{yv});
    global.zv->push(bodies[i]{zv});
    global.mass->push(bodies[i]{mass});
}

bodies = [];

globaldef energy()
{
    var e = 0;
    for(var i = 0; i < NUM_BODIES; i++)
    {
        e += ( global.mass[i]
             * ( global.xv[i] * global.xv[i]
               + global.yv[i] * global.yv[i]
               + global.zv[i] * global.zv[i]
               )
             ) / 2;
        for(var j = i+1; j < NUM_BODIES; j++)
        {
            var dx = global.x[i] - global.x[j];
            var dy = global.y[i] - global.y[j];
            var dz = global.z[i] - global.z[j];
            var distance = sqrt(dx*dx + dy*dy + dz*dz);
            e -= (global.mass[i] * global.mass[j])/distance;
        }
    }
    return e;
}
globaldef offset_momentum()
{
    var px = 0, py = 0, pz = 0;
    for(var i = 0; i < NUM_BODIES; i++)
    {
        px += global.xv[i] * global.mass[i];
        py += global.yv[i] * global.mass[i];
        pz += global.zv[i] * global.mass[i];
    }
    global.xv[0] = -px/SOLAR_MASS;
    global.yv[0] = -py/SOLAR_MASS;
    global.zv[0] = -pz/SOLAR_MASS;
}
globaldef advance(delta)
{
    for(var i = 0; i < NUM_BODIES; i++)
    {
        for(var j = i+1; j < NUM_BODIES; j++)
        {
            var dx = global.x[i] - global.x[j];
            var dy = global.y[i] - global.y[j];
            var dz = global.z[i] - global.z[j];
            var distance_sq = dx*dx + dy*dy + dz*dz;
            var distance = sqrt(distance_sq);
            var power = delta / distance_sq / distance;
            var pj = global.mass[j] * power;
            var pi = global.mass[i] * power;
            global.xv[i] -= pj * dx;
            global.yv[i] -= pj * dy;
            global.zv[i] -= pj * dz;
            global.xv[j] += pi * dx;
            global.yv[j] += pi * dy;
            global.zv[j] += pi * dz;
        }
    }
    for(var i = 0; i < NUM_BODIES; i++)
    {
        global.x[i] += global.xv[i] * delta;
        global.y[i] += global.yv[i] * delta;
        global.z[i] += global.zv[i] * delta;
    }
}

offset_momentum();
print(energy());
for(var i = 0; i < 5000; i++)
{
    advance(0.01);
}
print(energy());
